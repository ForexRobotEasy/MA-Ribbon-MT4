mql5
// MA Ribbon MT4
// Author: [Your Name]
// Date: [Current Date]

// Include necessary libraries and dependencies

#property strict
#property indicator_chart_window

// Define input parameters

input int maPeriod1 = 5;
input int maPeriod2 = 10;
input int maPeriod3 = 20;
input int maPeriod4 = 50;
input int maPeriod5 = 100;
input int maPeriod6 = 200;
input int maPeriod7 = 500;
input int maPeriod8 = 1000;

input ENUM_APPLIED_PRICE maPrice = PRICE_CLOSE;

// Define global variables

double ma1, ma2, ma3, ma4, ma5, ma6, ma7, ma8;
double prevMa1, prevMa2, prevMa3, prevMa4, prevMa5, prevMa6, prevMa7, prevMa8;

// Initialization function

int OnInit()
{
    // Set indicator buffers
    SetIndexBuffer(0, ma1);
    SetIndexBuffer(1, ma2);
    SetIndexBuffer(2, ma3);
    SetIndexBuffer(3, ma4);
    SetIndexBuffer(4, ma5);
    SetIndexBuffer(5, ma6);
    SetIndexBuffer(6, ma7);
    SetIndexBuffer(7, ma8);

    IndicatorShortName('MA Ribbon MT4');
    SetIndexStyle(0, DRAW_LINE);
    SetIndexStyle(1, DRAW_LINE);
    SetIndexStyle(2, DRAW_LINE);
    SetIndexStyle(3, DRAW_LINE);
    SetIndexStyle(4, DRAW_LINE);
    SetIndexStyle(5, DRAW_LINE);
    SetIndexStyle(6, DRAW_LINE);
    SetIndexStyle(7, DRAW_LINE);

    return(INIT_SUCCEEDED);
}

// Calculation function

int OnCalculate(const int rates_total, const int prev_calculated, const datetime &time[],
                const double &open[], const double &close[], const double &high[], const double &low[],
                const long &tick_volume[], const long &volume[], const int &spread[])
{
    int limit = rates_total - prev_calculated;

    if (prev_calculated > 0)
        limit++;

    for (int i = 0; i < limit; i++)
    {
        ma1 = iMA(NULL, 0, maPeriod1, 0, MODE_SMA, maPrice, i);
        ma2 = iMA(NULL, 0, maPeriod2, 0, MODE_SMA, maPrice, i);
        ma3 = iMA(NULL, 0, maPeriod3, 0, MODE_SMA, maPrice, i);
        ma4 = iMA(NULL, 0, maPeriod4, 0, MODE_SMA, maPrice, i);
        ma5 = iMA(NULL, 0, maPeriod5, 0, MODE_SMA, maPrice, i);
        ma6 = iMA(NULL, 0, maPeriod6, 0, MODE_SMA, maPrice, i);
        ma7 = iMA(NULL, 0, maPeriod7, 0, MODE_SMA, maPrice, i);
        ma8 = iMA(NULL, 0, maPeriod8, 0, MODE_SMA, maPrice, i);

        if (prev_calculated > 0)
        {
            prevMa1 = iMA(NULL, 0, maPeriod1, 0, MODE_SMA, maPrice, i + prev_calculated - 1);
            prevMa2 = iMA(NULL, 0, maPeriod2, 0, MODE_SMA, maPrice, i + prev_calculated - 1);
            prevMa3 = iMA(NULL, 0, maPeriod3, 0, MODE_SMA, maPrice, i + prev_calculated - 1);
            prevMa4 = iMA(NULL, 0, maPeriod4, 0, MODE_SMA, maPrice, i + prev_calculated - 1);
            prevMa5 = iMA(NULL, 0, maPeriod5, 0, MODE_SMA, maPrice, i + prev_calculated - 1);
            prevMa6 = iMA(NULL, 0, maPeriod6, 0, MODE_SMA, maPrice, i + prev_calculated - 1);
            prevMa7 = iMA(NULL, 0, maPeriod7, 0, MODE_SMA, maPrice, i + prev_calculated - 1);
            prevMa8 = iMA(NULL, 0, maPeriod8, 0, MODE_SMA, maPrice, i + prev_calculated - 1);
        }
    }

    return(rates_total);
}
